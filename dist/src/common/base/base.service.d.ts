import { BaseEntity } from '@common';
import { DeepPartial, DeleteResult, FindOptionsWhere, Repository, UpdateResult } from 'typeorm';
import { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';
import { AbstractBaseService } from './base.interface';
export declare abstract class BaseService<T extends BaseEntity> extends AbstractBaseService<T> {
    private readonly repository;
    abstract notFoundMessage: string;
    constructor(repository: Repository<T>);
    create(data: DeepPartial<T>): Promise<T>;
    createMany(datas: DeepPartial<T>[]): Promise<T[]>;
    getOne(options: FindOptions<T>): Promise<T | null>;
    getOneOrFail(options: FindOrFailOptions<T>): Promise<T>;
    getOneById(id: string, options?: Partial<FindOptions<T>>): Promise<T | null>;
    getOneByIdOrFail(id: string, options?: Partial<FindOrFailOptions<T>>): Promise<T>;
    getOneOrCreate(options: FindOptions<T>, data?: DeepPartial<T>): Promise<T>;
    getAll(options: Partial<FindOptions<T>>): Promise<T[]>;
    getAllPaginated(options: FindPaginatedOptions<T>): Promise<IPaginationResponse<T>>;
    update(options: FindOrFailOptions<T>, data: QueryDeepPartialEntity<T>): Promise<T>;
    updateById(id: string, data: QueryDeepPartialEntity<T>, options?: Partial<FindOrFailOptions<T>>): Promise<T>;
    remove(options: FindOrFailOptions<T>): Promise<T>;
    removeById(id: string, options?: Partial<FindOrFailOptions<T>>): Promise<T>;
    removeAll(): Promise<DeleteResult>;
    softRemove(options: FindOrFailOptions<T>): Promise<T>;
    softRemoveById(id: string, options?: Partial<FindOrFailOptions<T>>): Promise<T>;
    softRemoveAll(): Promise<DeleteResult>;
    count(options: Partial<FindOptions<T>>): Promise<number>;
    getQueryBuilder(alias?: string): import("typeorm").SelectQueryBuilder<T>;
    increment(where: FindOptionsWhere<T>, field: string, value: number): Promise<UpdateResult>;
    decrement(where: FindOptionsWhere<T>, field: string, value: number): Promise<UpdateResult>;
    query<K = any>(queryString: string): Promise<K>;
}
